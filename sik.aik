Add		:= 0x0:4 0x0:12
Sub		:= 0x0:4 0x1:12
Test		:= 0x0:4 0x2:12
Lt		:= 0x0:4 0x3:12

Dup		:= 0x0:4 0x4:12
And		:= 0x0:4 0x5:12
Or		:= 0x0:4 0x6:12
Xor		:= 0x0:4 0x7:12

Load		:= 0x0:4 0x8:12
Store		:= 0x0:4 0x9:12

Ret		:= 0x0:4 0xa:12
Sys		:= 0x0:4 0xb:12

Push .i16 ?(((.i16&0xf800)==0xf800)||((.i16&0xf800)==0))	:= 0x1:4 .i16:12
Push .i16	:= 0xb:4 0x0:8 (.i16>>12):4 0x1:4 .i16:12

Call .i16 ?((.&0xf000)==(.i16&0xf000))	:= 0x4:4 .i16:12
Call .i16	:= 0xb:4 0x0:8 (.i16>>12):4 0x4:4 .i16:12
Jump .i16 ?((.&0xf000)==(.i16&0xf000))	:= 0x5:4 .i16:12
Jump .i16	:= 0xb:4 0x0:8 (.i16>>12):4 0x5:4 .i16:12
JumpF .i16 ?((.&0xf000)==(.i16&0xf000))	:= 0x6:4 .i16:12
JumpF .i16	:= 0xb:4 0x0:8 (.i16>>12):4 0x6:4 .i16:12
JumpT .i16 ?((.&0xf000)==(.i16&0xf000))	:= 0x7:4 .i16:12
JumpT .i16	:= 0xb:4 0x0:8 (.i16>>12):4 0x7:4 .i16:12

Get .i12	:= 0x8:4 .i12:12
Put .i12	:= 0x9:4 .i12:12
Pop .i12	:= 0xa:4 .i12:12
Pre .i16	:= 0xb:4 0x0:8 (.i16>>12):4

.segment .text 16 0x10000 0 .VMEM
.segment .data 16 0x10000 0x8000 .VMEM
.const 0 .lowfirst ; was wrong endian
